
Requirments:

1. Should be able to add 1 or more songs to the queue at a single time. Songs added will append to the end of the list.
2. Should be able to remove 1 or more songs from any position in the queue at a single time. 
3. Songs can be repeated, deleting a song queued more than once should not delete all instances of the song.
4. State must be maintained in memory.


Solution:
    A REST API with the below technical details will be implemented using the c# model/controller paradigm and can be tested using,
the built in Swagger UI. The necessary Models will be Songs, Queues, and Users, because the desired solution here is only for a single
user Users will not actually be implemented. For songs I will seed memory with a list of songs to select from and therefore will not
implement the associated controller (as this functionality is also not requested in the problem statement) beyond a GET to be able
to view the available song selection. Queue Model and controller will be fully implemented. To persist the Queue, I will store the 
queue in a MongoDB and in memory cache using a lazy population, cache-aside approach. This was initially implemented using only
static fields to keep the queue in memory. Iterated and extended the solution to use MongoDB and in memory cache. 


Models:
    Song
    - int Id
    - string Title
    - string Artist
    - string Album
    - int Duration

    Queue
    - string Id
    - List<Song> Songs
    - int OwnerId
    - DateTime LastSongStarted

    User
    - int Id



Endpoints/Controllers:
    Song:
        GET Song/GetAll

    Queue:
        GET Queue/{id}
        DELETE Queue/{id}
        POST Queue
        PUT Queue/AddSongs
        PUT Queue/DeleteSongs